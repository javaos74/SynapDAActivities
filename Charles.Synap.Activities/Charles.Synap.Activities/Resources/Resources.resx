<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityTemplate_Description" xml:space="preserve">
    <value>Synap Document Analyzer </value>
    <comment>activity description</comment>
  </data>
  <data name="Synap_DA_Request" xml:space="preserve">
    <value>Synap DA Request</value>
    <comment>Synap DA Request</comment>
  </data>
  <data name="Synap_APIKEY" xml:space="preserve">
    <value>Synap Document Analyzer Api Key</value>
    <comment>Synap Document Analyzer Api Key</comment>
  </data>
  <data name="Synap_APIKEY_Tip" xml:space="preserve">
    <value>Synap Document Analyzer Api Key</value>
    <comment>Synap Document Analyzer Api Key</comment>
  </data>
  <data name="Synap_Endpoint" xml:space="preserve">
    <value>Synap Document Analyer Endpoint </value>
    <comment>Synap Document Analyer Endpoint </comment>
  </data>
  <data name="Synap_Endpoint_Tip" xml:space="preserve">
    <value>Endpoint normally starts with http(s)://</value>
    <comment>Endpoint normally starts with http(s)://</comment>
  </data>
  <data name="Synap_FID" xml:space="preserve">
    <value>Unique request ID</value>
    <comment>Unique request ID</comment>
  </data>
  <data name="Synap_FID_Tip" xml:space="preserve">
    <value>Used to retrieve result </value>
    <comment>Used to retrieve result </comment>
  </data>
  <data name="Synap_InputFIlePath" xml:space="preserve">
    <value>Input Resource</value>
    <comment>Input File Path</comment>
  </data>
  <data name="Synap_InputFIlePath_Tip" xml:space="preserve">
    <value>Input Resource </value>
    <comment>Input FIle Path</comment>
  </data>
  <data name="Synap_OutputZipFilePath" xml:space="preserve">
    <value>Output Zip File Path</value>
    <comment>Output Zip File Path</comment>
  </data>
  <data name="Synap_OutputZipFilePath_Tip" xml:space="preserve">
    <value>Output zip file contains md, xml and json output file per page</value>
    <comment>Output zip file contains md, xml and json output file per page</comment>
  </data>
  <data name="Synap_DA_Result" xml:space="preserve">
    <value>Synap DA Result</value>
    <comment>Synap DA Result</comment>
  </data>
  <data name="Synap_ErrorMessage" xml:space="preserve">
    <value>Error Message</value>
    <comment>Error Message</comment>
  </data>
  <data name="Synap_ErrorMessage_Tip" xml:space="preserve">
    <value>Error Message when error occured during execution</value>
    <comment>Error Message when error occured during execution</comment>
  </data>
  <data name="Synap_TableCount" xml:space="preserve">
    <value>Table Count</value>
    <comment>Table Count</comment>
  </data>
  <data name="Synap_TableCount_Tip" xml:space="preserve">
    <value>Converted table count</value>
    <comment>Converted table count</comment>
  </data>
  <data name="Synap_ExcelFIle" xml:space="preserve">
    <value>Excel File Path</value>
    <comment>Excel FIle Path</comment>
  </data>
  <data name="Synap_ExcelFIle_Tip" xml:space="preserve">
    <value>Converted Excel File Path</value>
    <comment>Converted Excel file path</comment>
  </data>
  <data name="Synap_ResultZipFIle" xml:space="preserve">
    <value>Synap DA Result Zipfile resource</value>
    <comment>Synap DA Result zip file </comment>
  </data>
  <data name="Synap_ResultZipFile_Tip" xml:space="preserve">
    <value>Synap DA Result zip file contains all results ( md, xml, json)</value>
    <comment>Synap DA Result zip file contains all results ( md, xml, json)</comment>
  </data>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Synap_DA_Convert_Excel" xml:space="preserve">
    <value>Synap DA Convert Table To Excel</value>
    <comment>Synap Convert Table To Excel</comment>
  </data>
  <data name="Synap_DA_Convert_Markdown" xml:space="preserve">
    <value>Synap DA Convert To Markdown</value>
    <comment>Synap DA Convert To Markdown</comment>
  </data>
  <data name="Synap_Markdown_Body" xml:space="preserve">
    <value>Converted Markdown body</value>
    <comment>Converted Markdown body</comment>
  </data>
  <data name="Synap_Markdown_Body_Tip" xml:space="preserve">
    <value>Converted Markdown body as string </value>
    <comment>Converted Markdown body as string </comment>
  </data>
  <data name="Synap_PageCount" xml:space="preserve">
    <value>Page Count</value>
    <comment>Page Count of markdown body</comment>
  </data>
  <data name="Synap_PageCount_Tip" xml:space="preserve">
    <value>Page Count</value>
    <comment>Page count of converted markdown body</comment>
  </data>
  <data name="Synap_Status" xml:space="preserve">
    <value>Server Status code</value>
    <comment>Server Status code</comment>
  </data>
  <data name="Synap_Status_Tip" xml:space="preserve">
    <value>Server status code ( 200 OK otherwise error) </value>
    <comment>Server status code</comment>
  </data>
  <data name="Synap_KeepMerge" xml:space="preserve">
    <value>Keep Cell Merged in Table</value>
    <comment>Keep Cell Merged in Table</comment>
  </data>
  <data name="Synap_KeepMerge_Tip" xml:space="preserve">
    <value>Keep Cell Merged in Table</value>
    <comment>Keep Cell Merged in Table</comment>
  </data>
  <data name="Synap_DA_Convert_ExcelToJson" xml:space="preserve">
    <value>Synap DA Convert DataTable To JSON</value>
    <comment>Synap DA Convert DataTable To JSON</comment>
  </data>
  <data name="Synap_InputDataTable" xml:space="preserve">
    <value>Input DataTable</value>
    <comment>Input DataTable</comment>
  </data>
  <data name="Synap_InputDataTable_Tip" xml:space="preserve">
    <value>Input DataTable to convert to JSON</value>
    <comment>Input DataTable to convert to JSON</comment>
  </data>
  <data name="Synap_OutputJsonFilePath" xml:space="preserve">
    <value>Output JSON File Path</value>
    <comment>Output JSON File Path</comment>
  </data>
  <data name="Synap_OutputJsonFilePath_Tip" xml:space="preserve">
    <value>File path where the converted JSON will be saved</value>
    <comment>File path where the converted JSON will be saved</comment>
  </data>
  <data name="Synap_RecordCount" xml:space="preserve">
    <value>Record Count</value>
    <comment>Record Count</comment>
  </data>
  <data name="Synap_RecordCount_Tip" xml:space="preserve">
    <value>Number of records converted to JSON</value>
    <comment>Number of records converted to JSON</comment>
  </data>

</root>