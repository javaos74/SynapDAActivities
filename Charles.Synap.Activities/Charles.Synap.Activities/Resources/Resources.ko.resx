<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivityTemplate_Description" xml:space="preserve">
    <value>Synap Document Analyzer </value>
    <comment>activity description</comment>
  </data>
  <data name="Synap_DA_Request" xml:space="preserve">
    <value>사이냅소프트 DA 분석 요청</value>
    <comment>Synap DA Request</comment>
  </data>
  <data name="Synap_APIKEY" xml:space="preserve">
    <value>사이냅소프트 DA 인증키</value>
    <comment>Synap Document Analyzer Api Key</comment>
  </data>
  <data name="Synap_APIKEY_Tip" xml:space="preserve">
    <value>사이냅소프트 DA 인증키</value>
    <comment>Synap Document Analyzer Api Key</comment>
  </data>
  <data name="Synap_Endpoint" xml:space="preserve">
    <value>사이냅소프트 DA 서버주소</value>
    <comment>Synap Document Analyer Endpoint </comment>
  </data>
  <data name="Synap_Endpoint_Tip" xml:space="preserve">
    <value>사이냅소프트 DA 서버주소 ( 보통 http(s)://로 시작 함)</value>
    <comment>Endpoint normally starts with http(s)://</comment>
  </data>
  <data name="Synap_FID" xml:space="preserve">
    <value>사이냅소프트 DA 요청 구분자</value>
    <comment>Unique request ID</comment>
  </data>
  <data name="Synap_FID_Tip" xml:space="preserve">
    <value>사이냅소프트 DA 분석 요청 이후 결과 값 조회에 사용되는 구분자</value>
    <comment>Used to retrieve result </comment>
  </data>
  <data name="Synap_InputFIlePath" xml:space="preserve">
    <value>분석 요청 대상 파일</value>
    <comment>Input File Path</comment>
  </data>
  <data name="Synap_InputFIlePath_Tip" xml:space="preserve">
    <value>분석 요청 대상 파일( PDF, Word, Excel, 이미지 파일 지원)</value>
    <comment>Input FIle Path</comment>
  </data>
  <data name="Synap_OutputZipFilePath" xml:space="preserve">
    <value>분석 요청 결과 파일</value>
    <comment>Output Zip File Path</comment>
  </data>
  <data name="Synap_OutputZipFilePath_Tip" xml:space="preserve">
    <value>분석 요청 결과 파일로 zip파일 형태로 제공 됨 (압축 해제시 필요한 md, json, xml  파일이 포함되어 있음)</value>
    <comment>Output zip file contains md, xml and json output file per page</comment>
  </data>
  <data name="Synap_DA_Result" xml:space="preserve">
    <value>사이냅소프트 DA 결과 요청</value>
    <comment>Synap DA Result</comment>
  </data>
  <data name="Synap_ErrorMessage" xml:space="preserve">
    <value>오류 메세지</value>
    <comment>Error Message</comment>
  </data>
  <data name="Synap_ErrorMessage_Tip" xml:space="preserve">
    <value>사이냅소프트 DA 실행 중 발생한 오류 메세지 </value>
    <comment>Error Message when error occured during execution</comment>
  </data>
  <data name="Synap_TableCount" xml:space="preserve">
    <value>테이블 개수</value>
    <comment>Table Count</comment>
  </data>
  <data name="Synap_TableCount_Tip" xml:space="preserve">
    <value>엑셀파일에 저장되는 테이블 개수( 1개 테이블이 하나의 sheet로 저장됨)</value>
    <comment>Converted table count</comment>
  </data>
  <data name="Synap_ExcelFIle" xml:space="preserve">
    <value>결과 엑셀 파일 경로</value>
    <comment>Excel FIle Path</comment>
  </data>
  <data name="Synap_ExcelFIle_Tip" xml:space="preserve">
    <value>결과중 테이블 데이터를 저장할 엑셀 파일 경로</value>
    <comment>Converted Excel file path</comment>
  </data>
  <data name="Synap_ResultZipFIle" xml:space="preserve">
    <value>분석 결과 파일 </value>
    <comment>Synap DA Result zip file </comment>
  </data>
  <data name="Synap_ResultZipFile_Tip" xml:space="preserve">
    <value>분석 결과 파일 </value>
    <comment>Synap DA Result zip file contains all results ( md, xml, json)</comment>
  </data>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Synap_DA_Convert_Excel" xml:space="preserve">
    <value>사이냅소프트 DA 테이블 엑셀로 전환</value>
    <comment>Synap Convert Table To Excel</comment>
  </data>
  <data name="Synap_DA_Convert_Markdown" xml:space="preserve">
    <value>사이냅소프트 DA 마크다운으로 변환</value>
  </data>
  <data name="Synap_Markdown_Body" xml:space="preserve">
    <value>변환된 마크다운 본문</value>
  </data>
  <data name="Synap_Markdown_Body_Tip" xml:space="preserve">
    <value>문자열 형태의 마크다운 데이터 본문</value>
  </data>
  <data name="Synap_PageCount" xml:space="preserve">
    <value>페이지 수</value>
  </data>
  <data name="Synap_PageCount_Tip" xml:space="preserve">
    <value>마크다운 본문의 페이지 수 </value>
  </data>
</root>